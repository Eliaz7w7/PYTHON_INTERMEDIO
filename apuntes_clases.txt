Para este entonces se debe aprender Python basico y git y github con Freddy

//QUE ES UN ENTORNO VIRTUAL
Un entorno virtual es como "un cuarto para cada proyecto" 
Ejm: 
	|||||||||||||||||		|||||||||||||||||
	|PROYECTO A	|		|PROYECTO B	|
	|		|		|		|
	|		|		|		|
	|		|		|		|
	|		|		|		|
	|		|		|		|
	|		|		|		|
	|		|		|		|
	|		|		|		|
	|		|		|		|
	|		|		|		|
	|||||||||||||||||		|||||||||||||||||	

En cada proyecto se puede modificar un modulo (como random) 
Si bien lo modificas en A puedes y no puedes modificarlo en B

VER IMAGEN 1

//CREAR ENTORNO VIRTUAL DE PYTHON
Creacion de entorno virtual
py -m venv "nombre"

Darle uso (Windows)
.\nombre\Scripts\activate

Darle uso (Linux)
source nombre/bin/activate

Darle uso en derivado de linux (Git)
source nombre/Scripts/activate


//MANEJADOR DE DEPENDENCIAS * PIP *
Un modulo es codigo hecho por otras personas para que nosotros no lo volvamos a hacer un ejm es Random.

Para ver los modulos en nuestro entorno 
pip freeze

Para instalar un modulo
pip install <nombre>

Para guardarlos en un txt
pip freeze > nombre.txt

Para instalar los modulos desde un txt
pip install -r nombre.txt


//LISTAS Y DICCIONARIOS ANIDADOS
Es cuando hay uno o mas diccionarios dentro de una lista o viceversa
ejm:

super_list= [
    {"Nombre":"Elias", "Apellido":"Auque"},
    {"Nombre":"Cristian", "Apellido":"Domingez"},
    {"Nombre":"Jazmin", "Apellido":"Aguilar"},
    {"Nombre":"Harry", "Apellido":"Potter"}
    ]

super_dic={
        "num_nat":[1,2,3,4,5],
        "letras":["a","b","c","d"],
        "flotantes":[1.2,2.5,3.5],
    }


//LIST COMPREHENSION
List comprehension son "listas resumidas"
ejm:

abc = [i**2 for i in range(1,11) if i % 2 == 0]
Lo que estamos diciendo es que solo se guardaran los numeros pares en la lista abc


//DIC COMPREHENSION
Es exactamente igual exepto que hay que añadir i:i**2 al codigo
ejm:

abc= {i:i**2 for i in range(1,11)}

Nota:
para añadir una llave y un valor al diccionario en un for es abc[i]=i**2


////LAMBDA
Es una funcion anonima
es como una funcion pero en una sola linea de codigo


#En vez de usar
	def nombre():
    	     pass


# Se puede usar
	f = lambda var: 1+1 #Funcion
Ver gif 1

//Funciones de orden superior

Son funciones que toma como parametro otras funciones
ejm:


        def run(fun):
            fun()

        def saludo():
            print("hola")

        def despedida():
            print("Adios")


En estas existen 3 importantes

        FILTER

Se usa para ESCOGER datos, cuando se usa un lambda va un iterable (elemento que se puede recorrer)

     abc=list(filter(lambda x: x%2==0, range(1,11))

        MAP
Te envia todas las variables no usar un "if" se usa para potencia
    abc=list(filter(lambda x: x%2==0, range(1,11))

        REDUCE
Agarra dos variables de una lista y los suma ambos
el resultado se suma con la 3ra variable de la lista
No es necesario usar list sino agarra error
ejm:

        abc=reduce( lambda x,i: x+i, range(1,101))

ESTAS 3 FUNCIONES SE DEBE DOMINAR


VER LINK 1

///PROYECTO FILTRANDO DATOS

CON FOR:
		VER MAYORES DE 50
	abc=[]	-> Creamos una lista
	for x in DATA: -> Se crea un ciclo que recorra cada diccionario
	   if x["age"]>=50: -> Escogemos a aquellos que tengan mas de 50
	      abc.append(x["name"]) -> agregamos el nombre a la lista abc 
	print(abc)

CON FILTER Y MAP
	
	abc=list(filter(lambda x: x["age"]>=50,DATA])) -> Filtramos a los que tienen mas de 50
	abc=list(map(lambda x: x["name"],abc)) -> Escogemos el nombre
	print(abc)


CON LIST COMPREHENSION

	abc=[x["name"] for x in DATA if x["age"]>=50] -> Escogemos el nombre de los que tienen mas de 50
	print(abc)

	ESTE ES EL MAS OPTIMO YA QUE USA MENOS LINEAS DE CODIGO
//ERRORES EN EL CODIGO
Se puede dividir en dos partes

El que no avisa
	SISTAXYS ERROR: Es un error de logica (el codigo esta bien pero no hace 			lo que tu quieres)

Los que avisan
	EXCEPTION: Existen varios y ya ha salido antes ejm: KeyboardInterrupt			   (cuando precionas CTR + C ) lo que hace detener la consola
		   keyerror una llave inexistente, indexerror valor en lista 
		   inexistente filenotfounderror, zerodivisionerror,
		   ImportError cuando en un modulo hay un error
		   
		   Para solucionarlo se debe leer el traceback de fin a inicio.
//DEBUGGING
Para solucionar el sintaxys error se usa el debugging en visual (el triangulo con escarabajo


//EXCEPCIONES
Se haco con un try - except

ejm:
	try
	   a=input("Ingrese nombre: ")
	   print(a)
	except typeerror:
	   print("no ingrese numeros")


TAMBIEN SE PUEDE USAR RAISE
RAISE ELEVA EL ERROR Y SE DETIENE EN ESA PARTE EL CODIGO ANTERIOR ES EJECUTADO
	

	     try
	  	  a=input("Ingrese nombre: ")
	          if a.isnumeric():
	    	    raise typeerror
		  print(a)
 	     except typeerror
	     	print("Ingrese un numero")
//ASSERT
Assert es como un try - except en uno 
	a=input("Ingrese numero: ")
	assert a.isnumeric(), "No es un numero"  -> assert <condicion>, <msj>
	abc=[x for x in range(1,int(a)+1) if a%x==0]
	print(abc)
Para mi es el mas optimo LA CONDICION ES "AFIRMO QUE ESTO ES VERDADERO" sino 
imprimir mensaje

//MANEJO DE ARCHIVOS
Hay 3 opciones:
     a = agregar texto al final
     w = Sobre-escribir en el texto
     r = leer archivo

Es una simple linea de codigo
  	with open("./ruta/del/archivo.txt", "w", encoding="utf-8") as f:

